module FunscriptDancer

using Observables
using JSON
using Gtk

struct Parameters
    start_time
    end_time
    energy_multiplier
end

include("AudioAnalysis.jl")
include("Actions.jl")

audio_data = Observable{Union{AudioData,Nothing}}(nothing)
parameters = Observable{Union{Parameters,Nothing}}(nothing)
actions = Observable{Union{Actions,Nothing}}(nothing)
load_status = Observable{LoadStatus}(LoadStatus("", 0))

function open_file(uri)
    video_file = String(QString(uri))
    try
        audio_data[] = load_audio_data(video_file, load_status)
    catch e
        load_status[] = LoadStatus("Error: $e", 0)
    end
end

function connect_ui(builder::GtkBuilder)

    on(load_status) do status
        println(status)
        # update UI
    end

    on(audio_data) do data
        if (data !== nothing)
            # update UI
            if (parameters[] !== nothing)
                actions[] = create_actions(data, parameters[])
            else
                parameters[] = Parameters(0, data.duration, 1)
            end
        end
    end

    on(parameters) do parms
        if (audio_data[] !== nothing && parms !== nothing)
            actions[] = create_actions(audio_data[], parms)
        end
    end

    on(actions) do acts
        if (acts !== nothing)
            #update UI
        end
    end
end

function save_funscript(funscript_filename::String)
    funscript = Dict(
        "metadata" => Dict(
            "creator" => "FunscriptDancer",
            "title" => audio_data[].name,
            "description" => "Procedurally generated by FunscriptDancer",
            "duration" => audio_data[].duration,
            "license" => "",
            "notes" => "",
            "performers" => (),
            "script_url" => "",
            "tags" => ("music", "audio"),
            "type" => "",
            "video_url" => ""
        ),
        "range" => 100,
        "inverted" => false,
        "version" => 1.0,
        "actions" => actions[]
    )

    funscript_json = JSON.json(funscript)

    funscript_file = open(funscript_filename, "w+")
    write(funscript_file, funscript_json)
    close(funscript_file)
end

function julia_main()::Cint
    # start UI
    glade_file = joinpath(dirname(@__FILE__), "gtk", "FunscriptDancer.glade")
    builder = GtkBuilder(filename=glade_file)
    connect_ui(builder)
    app_window = builder["appwindow"]
    showall(app_window)
    @async Gtk.gtk_main()
    Gtk.waitforsignal(app_window,:destroy)
    return 0
end
export julia_main

end # module