using Observables
using JSON
using QML
using Qt5QuickControls_jll
using Qt5QuickControls2_jll

struct Parameters
    start_time
    end_time
    normalised_energy_to_pos
end

const Actions = Vector{Dict{String,Int}}

include("AudioAnalysis.jl")
include("Actions.jl")

audio_data = Observable{Union{AudioData,Nothing}}(nothing)
parameters = Observable{Union{Parameters,Nothing}}(nothing)
actions = Observable{Union{Actions,Nothing}}(nothing)

function main(; multiplier::Real=1, start_time::Real=0, end_time::Real=0)
    parameters[] = Parameters(start_time, end_time, create_default_normalised_energy_to_pos(multiplier))
end

function open_file(uri)
    video_file = String(QString(uri))
    function wrap_load_audio_data(load_status::Channel{LoadStatus})
        try
            audio_data[] = load_audio_data(video_file, load_status)
        catch e
            put!(load_status, "Error analysing the file: $e")
        end
    end
    load_status = Channel{LoadStatus}(wrap_load_audio_data, spawn=true)
    for status in load_status
        println(status)
        @emit loadStatus(status.msg, status.position)
    end
end

on(audio_data) do data
    @emit audioDataReady(audio_data)
    if (data !== nothing && parameters[] !== nothing)
        actions[] = create_actions(data, parms)
    end
end

on(parameters) do parms
    if (audio_data[] !== nothing && parms !== nothing)
        actions[] = create_actions(data, parms)
    end
end

on(actions) do acts
    if (acts !== nothing)
        save_funscript(audio_data[], acts)
    end
end

function save_funscript(uri)
    funscript_filename = String(QString(uri))
    funscript = Dict(
        "metadata" => Dict(
            "creator" => "FunscriptDancer",
            "title" => data.name,
            "description" => "Procedurally generated by FunscriptDancer",
            "duration" => data.duration,
            "license" => "",
            "notes" => "",
            "performers" => (),
            "script_url" => "",
            "tags" => ("music", "audio"),
            "type" => "",
            "video_url" => ""
        ),
        "range" => 100,
        "inverted" => false,
        "version" => 1.0,
        "actions" => actions
    )

    funscript_json = JSON.json(funscript)

    funscript_file = open(funscript_filename, "w")
    write(funscript_file, funscript_json)
    close(funscript_file)
end

@qmlfunction open_file save_funscript

qml_file = joinpath(dirname(Base.source_path()), "qml", "funscript_dancer.qml")

loadqml(qml_file)
exec()
