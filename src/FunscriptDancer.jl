using Observables
using JSON
using QML
using Qt5QuickControls_jll
using Qt5QuickControls2_jll

struct Parameters
    start_time
    end_time
    energy_multiplier
end

include("AudioAnalysis.jl")
include("Actions.jl")

audio_data = Observable{Union{AudioData,Nothing}}(nothing)
parameters = Observable{Union{Parameters,Nothing}}(nothing)
actions = Observable{Union{Actions,Nothing}}(nothing)
load_status = Observable{LoadStatus}(LoadStatus("", 0))

function open_file(uri)
    video_file = String(QString(uri))
    try
        audio_data[] = load_audio_data(video_file, load_status)
    catch e
        load_status[] = LoadStatus("Error: $e", 0)
    end
end

on(load_status) do status
    println(status)
    @emit loadStatus(status.msg, status.position)
end

on(audio_data) do data
    if (data !== nothing)
        @emit audioDataReady(data.name, data.duration)
        if (parameters[] !== nothing)
            actions[] = create_actions(data, parameters[])
        else
            parameters[] = Parameters(0, data.duration, 1)
        end
    end
end

on(parameters) do parms
    if (audio_data[] !== nothing && parms !== nothing)
        actions[] = create_actions(audio_data[], parms)
    end
end

on(actions) do acts
    if (acts !== nothing)
        @emit actionsReady()
    end
end

function munge_URI(uri::String)
    joinpath(split(SubString(uri,8)))
end

function save_funscript(uri)
    funscript_filename = munge_URI(String(QString(uri)))
    funscript = Dict(
        "metadata" => Dict(
            "creator" => "FunscriptDancer",
            "title" => audio_data[].name,
            "description" => "Procedurally generated by FunscriptDancer",
            "duration" => audio_data[].duration,
            "license" => "",
            "notes" => "",
            "performers" => (),
            "script_url" => "",
            "tags" => ("music", "audio"),
            "type" => "",
            "video_url" => ""
        ),
        "range" => 100,
        "inverted" => false,
        "version" => 1.0,
        "actions" => actions[]
    )

    funscript_json = JSON.json(funscript)

    funscript_file = open(funscript_filename, "w+")
    write(funscript_file, funscript_json)
    close(funscript_file)
end

@qmlfunction open_file save_funscript

qml_file = joinpath(dirname(Base.source_path()), "qml", "funscript_dancer.qml")

loadqml(qml_file)
if isinteractive()
    exec_async()
else
    exec()
end
